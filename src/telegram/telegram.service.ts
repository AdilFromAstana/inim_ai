import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { Telegraf } from 'telegraf';
import { ReminderService } from '../reminders/reminder.service';
import { ConfigService } from '@nestjs/config';
import moment from 'moment-timezone';
import { FirebaseService } from 'src/firebase/firebase.service';

@Injectable()
export class TelegramService implements OnModuleInit {
    private readonly logger = new Logger(TelegramService.name);
    private bot: Telegraf;
    private readonly GEMINI_URL =
        'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';
    private readonly userTz = 'Asia/Almaty';

    constructor(
        private readonly reminders: ReminderService,
        private readonly config: ConfigService,
        private readonly firebase: FirebaseService
    ) { }

    async onModuleInit() {
        const token = this.config.get<string>('TELEGRAM_BOT_TOKEN');
        const apiKey = this.config.get<string>('GEMINI_API_KEY');

        if (!token) throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω');
        if (!apiKey) throw new Error('GEMINI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω');

        this.bot = new Telegraf(token);
        this.reminders.setBot(this.bot);

        const userReplies = new Map<number, { lastPrompt: string; active: boolean }>();

        this.bot.on('text', async (ctx) => {
            const text = ctx.message.text.trim();
            const user = ctx.message.from;
            const username = user.username || user.first_name;
            const now = new Date().toISOString();

            this.logger.log(`üí¨ [${username}] –Ω–∞–ø–∏—Å–∞–ª: "${text}"`);

            const waiting = userReplies.get(user.id);
            if (waiting?.active) {
                userReplies.set(user.id, { ...waiting, active: false });
                await ctx.reply('‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π.');
                return;
            }

            const prompt = `
–¢—ã ‚Äî Telegram-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω.

‚öôÔ∏è –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ JSON:
{
  "action": "reminder" | "chat",
  "message": "–∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≥–¥–µ —Ç—ã —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—à—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
  "reminder"?: {
    "text": "—á—Ç–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å",
    "datetime": "ISO-–≤—Ä–µ–º—è –≤ UTC, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
  }
}

–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (UTC): ${now}.
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: "${text}".

‚ö†Ô∏è –í–∞–∂–Ω–æ–µ:
- –õ–æ–∫–∞–ª—å–Ω–∞—è —á–∞—Å–æ–≤–∞—è –∑–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: Asia/Almaty (UTC+5).  
- –í –ø–æ–ª–µ "datetime" –≤–µ—Ä–Ω–∏ **ISO-–≤—Ä–µ–º—è –≤ UTC**, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.  
  –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª "–≤ 8 —É—Ç—Ä–∞", –≤–µ—Ä–Ω–∏ UTC-–≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 08:00 –ø–æ Asia/Almaty.
- –ù–µ –º–µ–Ω—è–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –¥–∞–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ UTC-–≤—Ä–µ–º—è.
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–º–µ—â–∞–π UTC –µ—â—ë —Ä–∞–∑ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –∑–æ–Ω—É ‚Äî —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å—Ç–æ–µ UTC-–≤—Ä–µ–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.

–û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ JSON.
`;

            try {
                const response = await fetch(this.GEMINI_URL, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'x-goog-api-key': apiKey },
                    body: JSON.stringify({
                        contents: [{ role: 'user', parts: [{ text: prompt }] }],
                        generationConfig: { temperature: 0.5, topP: 0.9, maxOutputTokens: 300 },
                    }),
                });

                const data = await response.json();
                if (data.error) {
                    this.logger.error(`‚ùå Gemini API error: ${data.error.message}`);
                    await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
                    return;
                }

                let rawReply = data?.candidates?.[0]?.content?.parts
                    ?.map((p) => p.text)
                    .join(' ')
                    ?.trim();

                if (!rawReply) {
                    await ctx.reply('ü§î –ù–µ –ø–æ–Ω—è–ª, –ø–æ–≤—Ç–æ—Ä–∏ –∏–Ω–∞—á–µ.');
                    return;
                }

                rawReply = rawReply.replace(/```json|```/g, '').trim();

                let parsed: any;
                try {
                    const jsonStart = rawReply.indexOf('{');
                    if (jsonStart === -1) {
                        await ctx.reply('‚ö†Ô∏è AI –æ—Ç–≤–µ—Ç–∏–ª –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µ.');
                        return;
                    }
                    parsed = JSON.parse(rawReply.slice(jsonStart));
                } catch {
                    this.logger.warn(`‚ö†Ô∏è Gemini –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: ${rawReply}`);
                    await ctx.reply('‚ö†Ô∏è AI –æ—Ç–≤–µ—Ç–∏–ª –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µ.');
                    return;
                }

                this.logger.log(`ü§ñ –û—Ç–≤–µ—Ç Gemini: ${JSON.stringify(parsed)}`);

                if (parsed.action === 'reminder' && parsed.reminder?.datetime) {
                    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º UTC –Ω–∞–ø—Ä—è–º—É—é
                    const utcDate = moment.utc(parsed.reminder.datetime).toDate();

                    await this.reminders.create({
                        userId: user.id,
                        text: parsed.reminder.text,
                        datetime: utcDate, // —Å–æ—Ö—Ä–∞–Ω—è–µ–º UTC
                    });

                    // 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    const localTime = moment(utcDate)
                        .tz(this.userTz)
                        .format('HH:mm, D MMMM');

                    await ctx.reply(
                        `‚úÖ –û–∫–µ–π! –Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ "${parsed.reminder.text}" –≤ ${localTime} –ø–æ —Ç–≤–æ–µ–º—É –≤—Ä–µ–º–µ–Ω–∏.`
                    );
                    return;
                }

                await ctx.reply(parsed.message || '–û–∫–µ–π üëç');
            } catch (err) {
                this.logger.error(`üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${err.message}`, err.stack);
                await ctx.reply('‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
            }
        });

        await this.bot.launch();
        this.logger.log('üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.');
    }
}
