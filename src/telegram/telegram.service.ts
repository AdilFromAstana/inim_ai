import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { Telegraf } from 'telegraf';
import { ReminderService } from '../reminders/reminder.service';
import { ConfigService } from '@nestjs/config';
import moment from 'moment-timezone';

@Injectable()
export class TelegramService implements OnModuleInit {
    private readonly logger = new Logger(TelegramService.name);
    private bot: Telegraf;
    private readonly GEMINI_URL =
        'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';

    constructor(
        private readonly reminders: ReminderService,
        private readonly config: ConfigService,
    ) { }

    async onModuleInit() {
        const token = this.config.get<string>('TELEGRAM_BOT_TOKEN');
        const apiKey = this.config.get<string>('GEMINI_API_KEY');

        if (!token) throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω');
        if (!apiKey) throw new Error('GEMINI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω');

        this.bot = new Telegraf(token);
        this.reminders.setBot(this.bot);

        // üß† –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ—Å–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        const userReplies = new Map<number, { lastPrompt: string; active: boolean }>();

        this.bot.on('text', async (ctx) => {
            const text = ctx.message.text.trim();
            const user = ctx.message.from;
            const username = user.username || user.first_name;
            const now = new Date().toISOString();

            this.logger.log(`üí¨ [${username}] –Ω–∞–ø–∏—Å–∞–ª: "${text}"`);

            // –ï—Å–ª–∏ –±–æ—Ç —Ä–∞–Ω–µ–µ –∂–¥–∞–ª –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —Å—á–∏—Ç–∞–µ–º –∑–∞–¥–∞—á—É –∑–∞–∫—Ä—ã—Ç–æ–π
            const waiting = userReplies.get(user.id);
            if (waiting?.active) {
                userReplies.set(user.id, { ...waiting, active: false });
                await ctx.reply('‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π.');
                return;
            }

            const userTz = 'Asia/Almaty';

            const prompt = `
–¢—ã ‚Äî Telegram-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω.

‚öôÔ∏è –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ JSON:
{
  "action": "reminder" | "chat",
  "message": "–∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≥–¥–µ —Ç—ã —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—à—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
  "reminder"?: {
    "text": "—á—Ç–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å",
    "datetime": "ISO-–≤—Ä–µ–º—è (UTC –∏–ª–∏ —Å —Ç–∞–π–º–∑–æ–Ω–æ–π)"
  }
}

üìò –ü—Ä–∏–º–µ—Ä:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –≤—ã–ø–∏—Ç—å –≤–æ–¥—É"
–û—Ç–≤–µ—Ç:
{
  "action": "reminder",
  "message": "–û–∫–µ–π! –Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –≤—ã–ø–∏—Ç—å –≤–æ–¥—É –≤ 03:25 –ø–æ —Ç–≤–æ–µ–º—É –≤—Ä–µ–º–µ–Ω–∏.",
  "reminder": {
    "text": "–≤—ã–ø–∏—Ç—å –≤–æ–¥—É",
    "datetime": "2025-10-30T03:25:00+05:00"
  }
}

–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (UTC): ${now}.
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: "${text}".
–û–ø—Ä–µ–¥–µ–ª–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ—á–Ω–æ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
`;

            try {
                const response = await fetch(this.GEMINI_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'x-goog-api-key': apiKey,
                    },
                    body: JSON.stringify({
                        contents: [{ role: 'user', parts: [{ text: prompt }] }],
                        generationConfig: { temperature: 0.5, topP: 0.9, maxOutputTokens: 300 },
                    }),
                });

                const data = await response.json();

                if (data.error) {
                    this.logger.error(`‚ùå Gemini API error: ${data.error.message}`);
                    await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
                    return;
                }

                let rawReply = data?.candidates?.[0]?.content?.parts
                    ?.map((p) => p.text)
                    .join(' ')
                    ?.trim();

                if (!rawReply) {
                    await ctx.reply('ü§î –ù–µ –ø–æ–Ω—è–ª, –ø–æ–≤—Ç–æ—Ä–∏ –∏–Ω–∞—á–µ.');
                    return;
                }

                rawReply = rawReply.replace(/```json|```/g, '').trim();

                let parsed: any;
                try {
                    parsed = JSON.parse(rawReply);
                } catch {
                    this.logger.warn(`‚ö†Ô∏è Gemini –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: ${rawReply}`);
                    await ctx.reply('‚ö†Ô∏è AI –æ—Ç–≤–µ—Ç–∏–ª –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µ.');
                    return;
                }

                this.logger.log(`ü§ñ –û—Ç–≤–µ—Ç Gemini: ${JSON.stringify(parsed)}`);

                if (parsed.action === 'reminder' && parsed.reminder?.datetime) {
                    const reminderDate = new Date(parsed.reminder.datetime);

                    if (isNaN(reminderDate.getTime())) {
                        this.logger.warn(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: ${parsed.reminder.datetime}`);
                        await ctx.reply('‚ö†Ô∏è –ù–µ –ø–æ–Ω—è–ª, –∫–æ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å. –£–∫–∞–∂–∏ —Ç–æ—á–Ω–µ–µ.');
                        return;
                    }

                    await this.reminders.create({
                        userId: user.id,
                        text: parsed.reminder.text,
                        datetime: reminderDate,
                    });

                    const localTime = moment(reminderDate)
                        .tz(userTz)
                        .format('HH:mm, D MMMM');

                    this.logger.log(
                        `‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ "${parsed.reminder.text}" –Ω–∞ ${reminderDate.toISOString()}`,
                    );

                    await ctx.reply(
                        `‚úÖ –û–∫–µ–π! –Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ "${parsed.reminder.text}" –≤ ${localTime} –ø–æ —Ç–≤–æ–µ–º—É –≤—Ä–µ–º–µ–Ω–∏.`,
                    );

                    // ‚öôÔ∏è –ö–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    const delay = reminderDate.getTime() - Date.now();
                    if (delay > 0) {
                        setTimeout(async () => {
                            await ctx.reply(`‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—é: ${parsed.reminder.text}. –ù—É —á—Ç–æ, –∫–∞–∫ —Ç–∞–º –¥–µ–ª–∞?`);
                            userReplies.set(user.id, { lastPrompt: parsed.reminder.text, active: true });

                            const followUps = [
                                { delay: 7 * 60 * 1000, text: '–°–ª—É—à–∞–π, –∞ –∫–∞–∫ —Ç–∞–º, –≤—Å—ë —Å–¥–µ–ª–∞–ª?' },
                                { delay: 25 * 60 * 1000, text: '–ö–∞–∂–µ—Ç—Å—è, —Ç–∏—à–∏–Ω–∞... –Ω–∞–¥–µ—é—Å—å, –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ?' },
                                {
                                    delay: 60 * 60 * 1000,
                                    text: '–õ–∞–¥–Ω–æ, –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π ‚òëÔ∏è (–æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª)',
                                },
                            ];

                            for (const follow of followUps) {
                                setTimeout(async () => {
                                    const state = userReplies.get(user.id);
                                    if (!state?.active) return; // –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª ‚Äî –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º
                                    await ctx.reply(follow.text);
                                    if (follow.text.includes('‚òëÔ∏è')) {
                                        userReplies.set(user.id, { ...state, active: false });
                                    }
                                }, follow.delay);
                            }
                        }, delay);
                    }
                    return;
                }

                await ctx.reply(parsed.message || '–û–∫–µ–π üëç');
            } catch (err) {
                this.logger.error(`üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${err.message}`, err.stack);
                await ctx.reply('‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
            }
        });

        await this.bot.launch();
        this.logger.log('üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.');
    }
}
